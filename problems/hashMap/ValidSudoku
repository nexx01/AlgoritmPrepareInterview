/*
36. Valid Sudoku
https://leetcode.com/problems/valid-sudoku/description/
*/

class Solution {
    //time: (n * n)
    //mem: (n * n)
    //Note: Оптимально O(n) по памяти, но доска имеет размер 
    // 9x9, поэтому нет смысла в оптимизации, т.к. 
    // сложность по факту будет O(1)
    public boolean isValidSudoku(char[][] board) {
        // тут храним пару (номер строки, значение)
       var rows = new HashSet<Pair>();
        //тут храним пару (номер колонки, значение)
       var cols = new HashSet<Pair>();
        // тут храним пару (номер блока, значение)
      var   blocks = new HashSet<Pair>();

        for(int i = 0;i<board.length;i++){
            for(int j =0;j<board[0].length;j++){
               char val = board[i][j];
                if(val=='.') continue;

               int  blockIdx=i/3*3+j/3;
                //если у нас уже есть такой элемент в 
                //строке/столбце/блоке
                //значит невалидное судоку
                var x = new Pair(i, val);
                var y = new Pair(j, val);
                var z = new Pair(blockIdx, val);
                if(rows.contains(x) || cols.contains(y)
                || blocks.contains(z)){
                return false;
                }

                rows.add(x);
                cols.add(y);
                blocks.add(z);
            }

        }

        return true;

    }

    
            class Pair{
                int idx;
                char val;
            public Pair(int x, char y){
                    idx=x; val=y;
                }
@Override
                public boolean equals(Object other){
                    return this.idx==((Pair)other).idx && this.val==((Pair)other).val;
                }
@Override
                public int hashCode(){
                    return 31*this.idx+this.val;
                }
            }
}
