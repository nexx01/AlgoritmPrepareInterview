/*
Top K Frequent Elements
https://leetcode.com/problems/top-k-frequent-elements/description/
*/

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        var map=new HashMap<Integer, Integer>();
        for(Integer i: nums){
            if(map.containsKey(i)){
                map.put(i,map.get(i)+1);
            }else{
                map.put(i,1);
            }

        }

           var heap =  new PriorityQueue<Map.Entry<Integer,Integer>>(Comparator.comparing(e->e.getValue(),(i1,i2)->i2-i1)); 
           var entries = map.entrySet();
           //heap size need only k
            for(Map.Entry entry:entries){
                heap.offer(entry);
            }
            var res =new int[k];
            for(int i=0;i<k;i++){
               res[i]=heap.poll().getKey();
            }

            //System.out.println(heap);
            return res;
    }
}
